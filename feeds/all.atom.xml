<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>CubieBoard</title><link href="http://cubieboard.github.io/" rel="alternate"></link><link href="http://cubieboard.github.io/feeds/all.atom.xml" rel="self"></link><id>http://cubieboard.github.io/</id><updated>2014-01-11T00:00:00+08:00</updated><entry><title>CBInstallfest 的体验</title><link href="http://cubieboard.github.io/cubier/cbi-zq-install.html" rel="alternate"></link><updated>2014-01-11T00:00:00+08:00</updated><author><name>Cubier</name></author><id>tag:cubieboard.github.io,2014-01-11:cubier/cbi-zq-install.html</id><summary type="html">
&lt;h2 id="cbi"&gt;CBI&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://blog.zhgdg.org/2014-01/et-cbi1/"&gt;CBInstall.1 欢乐完成&lt;/a&gt;
记要了现场活动的情况;&lt;/p&gt;
&lt;p&gt;当然,俺也是学员之一,要交作业的,所以,俺的刷机笔记如下:&lt;/p&gt;
&lt;h2 id="_1"&gt;目标&lt;/h2&gt;
&lt;p&gt;用CB3 替代原先的兼容 PC 机作家庭服务器!&lt;/p&gt;
&lt;h2 id="_2"&gt;环境&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;MBP 11年下半年版, 15吋&lt;/li&gt;
&lt;li&gt;MAC OS X 10.9 Mavericks&lt;/li&gt;
&lt;li&gt;CB3(CubieTruck) 以及套件的配件&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_3"&gt;刷机&lt;/h2&gt;
&lt;p&gt;果然如宣传的,是那么简单!&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;准备工具 ~ &lt;a href="http://docs.cubieboard.org/tutorials/common/livesuit_installation_guide"&gt;LiveSuit&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;下载镜像 ~ &lt;a href="http://dl.cubieboard.org/software"&gt;NAND镜像&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;刷机&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;尝试了 arch linux 的镜像,发觉进入后包管理命令,完全不熟悉,所以,只好坚持使用 Ubuntu了.&lt;/p&gt;
&lt;h3 id="_4"&gt;细节&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.cubieboard.org/tutorials/common/livesuit_installation_guide"&gt;LiveSuit&lt;/a&gt; 真心傻瓜,在MAC 上完全无碍!&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="livesuit_mac" src="http://zoomq.qiniudn.com/ZHGDG/2014/140111-CBInstallfest.1/livesuit_mac.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;下载时,为了大家的幸福,不要下载 .img 的文件,下载压缩的 .gz 文档本地解开就好&lt;/p&gt;
&lt;p&gt;$ 7z x lubuntu-server-nand.img.gz&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;为了防止手指意外的摸到带电元件,应该先将赠送的PV板安装上,注意:
&lt;img alt="cubietruck_fel_button" src="http://dyhr.com/wp-content/uploads/Cubietruck_FEL_button-300x224.jpg"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;正确的次序&lt;/li&gt;
&lt;li&gt;以及要将板上的保护膜清除&lt;/li&gt;
&lt;li&gt;另外,应该用 CB 驱动激光雕刻仪,来给每个PV 板刻上 CB小猴纸的 logo ,建议已经严正向 Benn 吼过了&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷机时, &lt;code&gt;FEL&lt;/code&gt; 键-USB线-电脑的先后顺序:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;电脑里先运行 LiveSuit 并加载目标NAND 镜像&lt;/li&gt;
&lt;li&gt;按住&lt;code&gt;FEL&lt;/code&gt; 键,不松,然后插入USB线&lt;/li&gt;
&lt;li&gt;再将 USB线插入电脑&lt;/li&gt;
&lt;li&gt;然后松开 &lt;code&gt;FEL&lt;/code&gt; 键&lt;/li&gt;
&lt;li&gt;LiveSuit 识别外部 CB 板,开始请求确认,准备好开始刷机了&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;刷机一般5分钟以内就可以完成:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;LiveSute 进度 100% 提示已经完成&lt;/li&gt;
&lt;li&gt;CB 板上的几个 LED 灯开始闪动&lt;/li&gt;
&lt;li&gt;这时,可以长按板上的 &lt;code&gt;POWER ON&lt;/code&gt; 键,进行热关闭&lt;/li&gt;
&lt;li&gt;等板上的灯都更灭时,代表 CB 已经加载的系统完全终止运行&lt;/li&gt;
&lt;li&gt;这时就可以拔下 USB 线了&lt;/li&gt;
&lt;li&gt;再将 CB 的电源插入,刷好的系统就真正自举运行起来了!&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;首次启动系统时, Ubuntu 会尝试获得当前的网络IP, 而且过期时间定为60秒,我们就只能安静的等哈等! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这绝对是应该优化的默认配置.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="ct_default_py.png（PNG 图像，814x201 像素）" src="http://zoomq.qiniudn.com/ZHGDG/2014/140111-CBInstallfest.1/ct_default_py.png"/&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;默认安装了Python 点赞!&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_5"&gt;问题&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;对于可以通过内核接口,调整板上 LED 灯的事儿&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;这么有趣,为毛不给出对应的文档?&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;两次都上了 Nand 镜像文件名的当! 比如: &lt;/p&gt;
&lt;p&gt;:::text
http://dl.cubieboard.org/software/a20-cubietruck/lubuntu/ \
ct-lubuntu-nand-v1.01/ct-lubuntu-server/lubuntu-server-nand.img.gz
ct-lubuntu-nand-v1.00/ct-lubuntu-server-20131026/lubuntu-server-nand.img.gz
ct-lubuntu-nand-v1.00/VGA/lubuntu-server-nand.img.gz&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;从下载路径的确可以看出是针对什么的镜像;
但是,无论哪种版本的镜像, lubuntu 的下载下来
都是 &lt;code&gt;lubuntu-server-nand.img.gz&lt;/code&gt;
解压缩 也都是 &lt;code&gt;lubuntu-server-nand.img&lt;/code&gt;
根本就看不出什么是什么了!
强烈建议,重新制定版本规范,也包含最终下载文件名;比如:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;13.06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;span class="n"&gt;ct&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;vga&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;lubuntu&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mf"&gt;13.06&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;nand&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;img&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;gz&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id="vga"&gt;VGA&lt;/h3&gt;
&lt;p&gt;是的,兴冲冲,回家准备接上网络,开始家庭服务器的配置!
结果发现,5年前的液瞐屏幕接上没有反应!
再扛来老婆的新液瞐屏也是只有间或的白色闪线,没有信号输出!&lt;/p&gt;
&lt;p&gt;这就要了亲命! &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;命令行上加载驱动,启动wifi 接入家庭无线网络,不是不行,只是没必要,因为以后的正当运行环境是拉网线的&lt;/li&gt;
&lt;li&gt;然而,网络和能接 HDMI 的液瞐电视不是一房,没办法现拉根网线去&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;所以,果断 google 之!
果然,是常见问题! 居然 VGA 的输出是需要特殊系统镜像的!&lt;/p&gt;
&lt;p&gt;这也才发现, CB3 的 VGA 支持系统镜像,居然只有在 &lt;code&gt;lubuntu-nand-v1.00&lt;/code&gt; 中有,
&lt;code&gt;lubuntu-nand-v1.01&lt;/code&gt; 中还没有完成兼容!&lt;/p&gt;
&lt;p&gt;重新刷上对口的 OS, 这下子终于见到熟悉的命令行界面了!!!&lt;/p&gt;
&lt;p&gt;但是:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;Welcome to Linaro 13.08 (GNU/Linux 3.4.61+ armv7l)

 * Documentation:  https://wiki.linaro.org/
New release '13.10' available.
Run 'do-release-upgrade' to upgrade to it.
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这倒底是升级呢? 还是不升级呢?!&lt;/p&gt;
&lt;h3 id="ip"&gt;IP&lt;/h3&gt;
&lt;p&gt;修订: &lt;code&gt;/etc/network/interfaces&lt;/code&gt; 为:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;auto lo eth0
iface lo inet loopback
&lt;span class="c"&gt;#iface eth0 inet dhcp&lt;/span&gt;
iface eth0 inet static

address 192.168.0.111
gateway 192.168.0.1
netmask 255.255.255.0
network 192.168.0.0
broadcast 192.168.0.255
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;重启网络:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;/etc/init.d/networking restart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就将原先每次重启时,可能变化的动态 IP 变成内网的静态 IP 了&lt;/p&gt;
&lt;h3 id="connection-refused"&gt;Connection refused&lt;/h3&gt;
&lt;p&gt;然后,配置了 &lt;code&gt;sudo&lt;/code&gt; 用户,刷了初始口令,就可以离开 VGA 远程随时随地进行控制了!&lt;/p&gt;
&lt;p&gt;可是竟然反馈说: &lt;code&gt;Connection refused&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;果断 Google 发布,是常见问题!&lt;/p&gt;
&lt;p&gt;&lt;a href="http://askubuntu.com/questions/30080/how-to-solve-connection-refused-errors-in-ssh-connection"&gt;openssh - How to solve 'Connection refused' errors in SSH connection? - Ask Ubuntu&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;完全无法相信自个儿的眼睛! 竟然是因为根本没有 &lt;code&gt;sshd&lt;/code&gt; 进程运行的原因!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install openssh-server openssh-client
sudo /etc/init.d/ssh start
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;再尝试&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;ssh&lt;/span&gt; &lt;span class="mf"&gt;192.168.0.111&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;一切正常了!&lt;/p&gt;
&lt;h3 id="ftab"&gt;ftab&lt;/h3&gt;
&lt;p&gt;看CB3 的硬件参数,应该有8G 内置空间的, 但是查询:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;df&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;h&lt;/span&gt;
&lt;span class="n"&gt;Filesystem&lt;/span&gt;      &lt;span class="n"&gt;Size&lt;/span&gt;  &lt;span class="n"&gt;Used&lt;/span&gt; &lt;span class="n"&gt;Avail&lt;/span&gt; &lt;span class="n"&gt;Use&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="n"&gt;Mounted&lt;/span&gt; &lt;span class="n"&gt;on&lt;/span&gt;
&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;root&lt;/span&gt;       &lt;span class="mf"&gt;2.0&lt;/span&gt;&lt;span class="n"&gt;G&lt;/span&gt; &lt;span class="mi"&gt;1019&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;  &lt;span class="mi"&gt;907&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;  &lt;span class="mi"&gt;53&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;
&lt;span class="n"&gt;devtmpfs&lt;/span&gt;        &lt;span class="mi"&gt;913&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;  &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="mi"&gt;913&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;
&lt;span class="n"&gt;none&lt;/span&gt;            &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;4.0&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;sys&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;fs&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;cgroup&lt;/span&gt;
&lt;span class="n"&gt;none&lt;/span&gt;            &lt;span class="mi"&gt;183&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;  &lt;span class="mi"&gt;160&lt;/span&gt;&lt;span class="n"&gt;K&lt;/span&gt;  &lt;span class="mi"&gt;183&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;   &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;
&lt;span class="n"&gt;none&lt;/span&gt;            &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mf"&gt;5.0&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;lock&lt;/span&gt;
&lt;span class="n"&gt;none&lt;/span&gt;            &lt;span class="mi"&gt;913&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;913&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;shm&lt;/span&gt;
&lt;span class="n"&gt;none&lt;/span&gt;            &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;     &lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="mi"&gt;100&lt;/span&gt;&lt;span class="n"&gt;M&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;不对哪,肿么只有2G 的空间?&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;$&lt;/span&gt; &lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;fdisk&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;l&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nand&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;7700&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;7700742144&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;936&lt;/span&gt; &lt;span class="n"&gt;cylinders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;15040512&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;
&lt;span class="n"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Sector&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;physical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nand&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nanda&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;67&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;67108864&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;cylinders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;131072&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;
&lt;span class="n"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Sector&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;physical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;

     &lt;span class="n"&gt;Device&lt;/span&gt; &lt;span class="n"&gt;Boot&lt;/span&gt;      &lt;span class="n"&gt;Start&lt;/span&gt;         &lt;span class="n"&gt;End&lt;/span&gt;      &lt;span class="n"&gt;Blocks&lt;/span&gt;   &lt;span class="n"&gt;Id&lt;/span&gt;  &lt;span class="n"&gt;System&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandb&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;2147&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2147483648&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;261&lt;/span&gt; &lt;span class="n"&gt;cylinders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;4194304&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;
&lt;span class="n"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Sector&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;physical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandb&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandc&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5469&lt;/span&gt; &lt;span class="n"&gt;MB&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5469372416&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="mi"&gt;255&lt;/span&gt; &lt;span class="n"&gt;heads&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;63&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;track&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;664&lt;/span&gt; &lt;span class="n"&gt;cylinders&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;total&lt;/span&gt; &lt;span class="mi"&gt;10682368&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt;
&lt;span class="n"&gt;Units&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sectors&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Sector&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;logical&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;physical&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;I&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;O&lt;/span&gt; &lt;span class="n"&gt;size&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;minimum&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;optimal&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt; &lt;span class="mi"&gt;512&lt;/span&gt; &lt;span class="n"&gt;bytes&lt;/span&gt;
&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="n"&gt;identifier&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt; &lt;span class="mh"&gt;0x00000000&lt;/span&gt;

&lt;span class="n"&gt;Disk&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandc&lt;/span&gt; &lt;span class="n"&gt;doesn&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;t&lt;/span&gt; &lt;span class="n"&gt;contain&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;valid&lt;/span&gt; &lt;span class="n"&gt;partition&lt;/span&gt; &lt;span class="n"&gt;table&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;果然有 &lt;code&gt;/dev/nandc&lt;/code&gt; 没有挂上;&lt;/p&gt;
&lt;p&gt;于是,先建立文件系统:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;mkfs.ext4 /dev/nandc
mke2fs 1.42.5 (29-Jul-2012)
Filesystem label=
OS type: Linux
Block size=4096 (log=2)
Fragment size=4096 (log=2)
...

Allocating group tables: done
Writing inode tables: done
Creating journal (32768 blocks):
done
Writing superblocks and filesystem accounting information: done
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;然后,不折腾,直接使用: &lt;code&gt;/etc/rc.local&lt;/code&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;sudo&lt;/span&gt; &lt;span class="n"&gt;mount&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;dev&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandc&lt;/span&gt; &lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;mnt&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;nandc&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;追加一行,完成! 这样重启时,将在最后一刻重新挂接上丢失的分区&lt;/p&gt;
&lt;h3 id="_6"&gt;其它&lt;/h3&gt;
&lt;p&gt;习惯性的安装 &lt;code&gt;htop&lt;/code&gt; 一看:&lt;/p&gt;
&lt;p&gt;&lt;img alt="ct_default_deamon.png（PNG 图像，1005x709 像素）" src="http://zoomq.qiniudn.com/ZHGDG/2014/140111-CBInstallfest.1/ct_default_deamon.png"/&gt;&lt;/p&gt;
&lt;p&gt;目测, 这一镜像的程序猿是 &lt;code&gt;LAMP&lt;/code&gt; 标准屌丝web 程序猿哪!!!&lt;/p&gt;
&lt;p&gt;按惯例, &lt;code&gt;server&lt;/code&gt; 版的发行系统镜像,应该是最小运维依赖核心系统:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;有最稳定的 内核&lt;/li&gt;
&lt;li&gt;包含最常见的系统工具&lt;/li&gt;
&lt;li&gt;包含最常见的硬件驱动&lt;/li&gt;
&lt;li&gt;默认启动 &lt;code&gt;sshd&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;默认配置好 &lt;code&gt;apt-fast&lt;/code&gt; ~ 用 axel 来加速 apt-get 软件安装&lt;/li&gt;
&lt;li&gt;..etc. 总之是面向 SA 的一个方便环境&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;怎么也没有想到,默认是启动跑了 &lt;code&gt;MySQL&lt;/code&gt;+&lt;code&gt;Apache&lt;/code&gt; 这两种一般 SA 一见就删除的东西&lt;/p&gt;
&lt;p&gt;有点 &lt;code&gt;细思恐极&lt;/code&gt; CB 应该及时提升自个儿 SA 的运营观念了,不能停留在上世纪了呢...&lt;/p&gt;
&lt;h1 id="todo"&gt;TODO&lt;/h1&gt;
&lt;p&gt;为了完全替代俺家原先的家庭服务器,可以支持多系统的内网络使用,
还要折腾的事儿有:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过 USB 挂接 FreeBSD 格式化的 UFS 分区&lt;/li&gt;
&lt;li&gt;通过板载 SATA 接口,加装 2.5吋 1T 新硬盘&lt;/li&gt;
&lt;li&gt;安装 Samba 系统,提供空间给其它 M$ 设备使用&lt;/li&gt;
&lt;li&gt;安装 netatalk ,支持 &lt;code&gt;Apple Time Machine&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装 MLDonkey 通过网页控制 &lt;code&gt;P2P&lt;/code&gt; 下载&lt;/li&gt;
&lt;li&gt;安装 MiniDLNA 发布家庭媒体服务,支持远程播放下载的电影&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;...&lt;/p&gt;
&lt;p&gt;总之,要搾干 CB 的一切潜能!&lt;/p&gt;
&lt;h1 id="_7"&gt;参考:&lt;/h1&gt;
&lt;p&gt;&lt;a href="http://dyhr.com/2013/11/22/how-to-install-lubuntu-server-on-cubietruck-from-mac-os-x/"&gt;How to install Lubuntu Server on Cubietruck from Mac OS X&lt;/a&gt;&lt;/p&gt;
&lt;h2 id="cbuieboard"&gt;CbuieBoard&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://www.ifanr.com/367898"&gt;Cubieboard ：享誉国外 Linux 圈子的中国产品- 爱范儿· Beats of Bits&lt;/a&gt;
- &lt;a href="http://linux-sunxi.org/Cubieboard/zh_cn"&gt;Cubieboard/zh cn - linux-sunxi.org&lt;/a&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://cubieboard.org/2013/10/30/cubieboard3-cubietruck-is-all-ready/"&gt;Cubieboard3: Cubietruck is all ready&lt;/a&gt; (cubieboard.org)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.cubieboard.org/tutorials/cb3/start"&gt;Tutorials for Cubietruck&lt;/a&gt; (cubieboard.org)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.cubieboard.org/faq/faqs"&gt;FAQ&lt;/a&gt; (cubieboard.org)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="linux"&gt;Linux&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://docs.cubieboard.org/tutorials/common/livesuit_installation_guide"&gt;LiveSuit Guide&lt;/a&gt;  (cubieboard.org)&lt;/li&gt;
&lt;li&gt;&lt;a href="http://www.lubuntu.net/"&gt;www.lubuntu.net&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.ubuntu.com/community/InstallingANewHardDrive?action=fullsearch&amp;amp;value=linkto%3A%22InstallingANewHardDrive%22&amp;amp;context=180"&gt;InstallingANewHardDrive&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archlinuxarm.org/platforms/armv7/allwinner/cubieboard"&gt;Cubieboard | Arch Linux ARM&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://archlinuxarm.org/platforms/armv7/allwinner/cubieboard-2"&gt;Cubieboard 2 | Arch Linux ARM&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h1 id="changelog"&gt;Changelog&lt;/h1&gt;
&lt;ul&gt;
&lt;li&gt;140119 终于汇集了所有唠叨!&lt;/li&gt;
&lt;li&gt;140111 开始总结&lt;/li&gt;
&lt;/ul&gt;</summary><category term="MAC"></category><category term="CT"></category><category term="Cubier"></category><category term="CubieBoard"></category><category term="ZQ"></category></entry><entry><title>How to from Jekyll jump into Pelican</title><link href="http://cubieboard.github.io/misc/jekyll-to-pelican.html" rel="alternate"></link><updated>2013-12-19T10:42:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:cubieboard.github.io,2013-12-19:misc/jekyll-to-pelican.html</id><summary type="html">
&lt;h1 id="jekyll-pelican"&gt;如何从 Jekyll 转进入 Pelican&lt;/h1&gt;
&lt;p&gt;简述静态网站从 Jekyll 环境中迁移为 纯 Python 
&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;...&lt;/p&gt;
&lt;p&gt;&lt;img alt=";" src="https://0.gravatar.com/avatar/0cb9d9d7e6b152d24d2b78c6464502a6?d=https%3A%2F%2Fidenticons.github.com%2Fc0b8694f59232c6681a92c4c9fec3e18.png&amp;amp;r=x&amp;amp;s=440"/&gt;&lt;/p&gt;
&lt;h2 id="_1"&gt;为毛&lt;/h2&gt;
&lt;p&gt;社区在发展, 原先的 蠎周刊,为方便,使用了 gitcafe 内置的 Jekyll 服务,
所以,其实在使用 Ruby 自动编译和发布.&lt;/p&gt;
&lt;p&gt;总是感觉不够纯粹 Pythonic ...&lt;/p&gt;
&lt;p&gt;故而, 下决心完成迁移&lt;/p&gt;
&lt;h1 id="_2"&gt;整体&lt;/h1&gt;
&lt;p&gt;忽然发现,俺感觉很直觉的事儿,也写了文档,
但是,其它人真正首次上手全然一头雾水...&lt;/p&gt;
&lt;p&gt;所以
&lt;a href="http://xiaolai.github.io/alpha/on-learning/"&gt;学习学习再学习 - xiaolai&lt;/a&gt;
提出的,俺实在无法同意更多..&lt;/p&gt;
&lt;p&gt;&lt;img alt="Impossible_staircase" src="http://upload.wikimedia.org/wikipedia/commons/3/34/Impossible_staircase.svg"/&gt;&lt;/p&gt;
&lt;p&gt;这是最难的知识结构——它往往看起来跟线性结构没什么区别，但，最终令人迷惑，甚至懊恼。
用最直白的话来描述，就是：&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="err"&gt;初级的知识需要对高级知识深入了解才能真正深入了解&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;——你看看这句话多拗口就多少有点概念了。&lt;/p&gt;
&lt;p&gt;所以,还是按照 easy 模式来,
先简单的说,再往死里说折腾的技术细节...&lt;/p&gt;
&lt;h2 id="_3"&gt;已知条件&lt;/h2&gt;
&lt;p&gt;&lt;a href="https://help.github.com/articles/user-organization-and-project-pages"&gt;User, Organization and Project Pages&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;github 的 所谓 &lt;code&gt;pages&lt;/code&gt; 服务的本质:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;云端的 Jekell 服务&lt;/li&gt;
&lt;li&gt;对约定的仓库,感知变化时,就尝试进行编译&lt;/li&gt;
&lt;li&gt;并自动完成发布(现在是到 github.io)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里的约定仓库,只有两种情况:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;用户/组织: &lt;ul&gt;
&lt;li&gt;比如, 注册成的用户/组织 为 https://github.com/foo&lt;/li&gt;
&lt;li&gt;则, github 尝试进行 &lt;code&gt;pages&lt;/code&gt; 发布的仓库为:&lt;/li&gt;
&lt;li&gt;https://github.com/foo/foo.github.io&lt;/li&gt;
&lt;li&gt;发布到:  https://foo.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;项目&lt;ul&gt;
&lt;li&gt;任意一个项目仓库,比如, https://github.com/foo/foobar&lt;/li&gt;
&lt;li&gt;则, githuba 支持自动对此仓库的 &lt;code&gt;gh-pages&lt;/code&gt; 分支进行 &lt;code&gt;pages&lt;/code&gt; 编译&lt;/li&gt;
&lt;li&gt;而发布为: https://foo.github.io/foobar&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id="pelican"&gt;Pelican行为&lt;/h2&gt;
&lt;p&gt;&lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt; 呢其实也只是
Python 世界中大堆静态网站发布工具中的一个,
为毛选中这个?
只是因为 42分钟里,大妈将其折腾起来了,
而且官方的文档/案例/样式,的确足够丰富,
给人信心...&lt;/p&gt;
&lt;p&gt;而其本身对网站的约定非常简单:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;配置好 &lt;code&gt;pelicanconf.py&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 目录中写作&lt;/li&gt;
&lt;li&gt;一键命令编译完成静态网络的生成,组织到 &lt;code&gt;output&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="_4"&gt;所以?方案!&lt;/h2&gt;
&lt;p&gt;基于以上的整体理解, 就可以决策怎么基于 github 的 &lt;code&gt;pages&lt;/code&gt; 服务,
来进行免费的网站发布了;&lt;/p&gt;
&lt;p&gt;目测也就两招:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在用户/组织 的 &lt;code&gt;pages&lt;/code&gt; 仓库中直接部署 Pelican 工程&lt;ul&gt;
&lt;li&gt;只是要在根目录部署一个自动跳转到 &lt;code&gt;output&lt;/code&gt; 子目录的 &lt;code&gt;index.html&lt;/code&gt; 页面&lt;/li&gt;
&lt;li&gt;以便发布后可以略过根目录来访问编译结果的内容&lt;/li&gt;
&lt;li&gt;发布成 https://foo.github.io/output&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;用两个仓库, 将用户/组织 的 &lt;code&gt;pages&lt;/code&gt; 仓库部署为 &lt;code&gt;output&lt;/code&gt; 子目录&lt;ul&gt;
&lt;li&gt;这样就能自动发布为 https://foo.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;很明显,第二种逼格较髙,所以,就这样办了!&lt;/p&gt;
&lt;h2 id="_5"&gt;宏观流程&lt;/h2&gt;
&lt;ol&gt;
&lt;li&gt;首次建立本地撰写环境:&lt;ol&gt;
&lt;li&gt;安装好 &lt;a href="http://getpelican.com/"&gt;Pelican&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;分别clone 出两个仓库:&lt;ul&gt;
&lt;li&gt;cubieboard.pelican &lt;/li&gt;
&lt;li&gt;cubieboard.github.io &lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;先在 &lt;code&gt;cubieboard.pelican&lt;/code&gt; 中测试确认好 pelical 工程可用,并尝试编译&lt;/li&gt;
&lt;li&gt;一切正确的话,将 &lt;code&gt;cubieboard.github.io&lt;/code&gt; 复制覆盖为 &lt;code&gt;cubieboard.pelican/output&lt;/code&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;以后,日常的维护就再也不需要 &lt;code&gt;cubieboard.github.io&lt;/code&gt; 了!&lt;ol&gt;
&lt;li&gt;进入 &lt;code&gt;cubieboard.pelican/content&lt;/code&gt; 创建/增补/修订 文章&lt;/li&gt;
&lt;li&gt;回到 &lt;code&gt;cubieboard.pelican&lt;/code&gt; 执行 &lt;code&gt;fab build&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地到 &lt;code&gt;output&lt;/code&gt; 打开对应页面检查效果&lt;/li&gt;
&lt;li&gt;还是在 &lt;code&gt;cubieboard.pelican&lt;/code&gt; 执行 &lt;code&gt;fab pub2hub&lt;/code&gt; &lt;ul&gt;
&lt;li&gt;完成对 &lt;code&gt;cubieboard.github.io&lt;/code&gt; 仓库实际的 push &lt;/li&gt;
&lt;li&gt;即, 发布成网站: http://cubieboard.github.io&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;最后,在 &lt;code&gt;cubieboard.pelican&lt;/code&gt; 进行正常的 &lt;code&gt;git add-&amp;gt;ci-&amp;gt;pu&lt;/code&gt;&lt;ul&gt;
&lt;li&gt;对文章源文本完成到 &lt;code&gt;cubieboard.pelican&lt;/code&gt; 仓库的提交&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;收功!&lt;/p&gt;
&lt;h1 id="_6"&gt;细节&lt;/h1&gt;
&lt;p&gt;然后, 再分享俺的折腾过程...&lt;/p&gt;
&lt;h2 id="_7"&gt;过程&lt;/h2&gt;
&lt;p&gt;整体上,其实就三步:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;选择一个 theme ,完成本地 demo 整明白怎么使用 Pelican&lt;/li&gt;
&lt;li&gt;将原先 Jekyll 格式的文章声明部分文本, 批量转化为 Pelican 的&lt;/li&gt;
&lt;li&gt;改进发布流程,自动化&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id="theme"&gt;theme&lt;/h3&gt;
&lt;p&gt;综合对比了官网收集的一堆样式,选择了 &lt;a href="https://github.com/DandyDev/pelican-bootstrap3"&gt;DandyDev&lt;/a&gt; 的,根据说明,立即就完成了编译,本地检阅 ;-)&lt;/p&gt;
&lt;h3 id="meta"&gt;meta&lt;/h3&gt;
&lt;p&gt;果断使用 Python 脚本,快速完成转换
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_plugins/jekyll2pelican.py"&gt;jekyll2pelican.py&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="fab"&gt;fab&lt;/h3&gt;
&lt;p&gt;果断使用 &lt;code&gt;fabric&lt;/code&gt; 进行自动化处理!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考: &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/fabfile.py"&gt;fabfile.py&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;定制了 &lt;code&gt;pub2cafe&lt;/code&gt; 完成自动化发布&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因为 &lt;code&gt;gitcafe&lt;/code&gt; 只有用户同名-pages 服务,所以,对于当前 &lt;code&gt;蠎周刊&lt;/code&gt; 的 Pelican 工程,
用两个仓库,配合完成:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;https://github.com/cubieboard/cubieboard.pelican.git
    +- ..
    +- pelicanconf.py   主配置文件
    +- content          内容目录  
    +- output           编译输出目录
    |    `- https://github.com/cubieboard/cubieboard.github.io.git 
    |                          |
    |                          \-- 即合法的
    +- .gitignore       配置忽略 output 目录
    +- ...
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;这样一来,目录,就不用进入 &lt;code&gt;output&lt;/code&gt; 目录进行 git 操作了
平时的发布流程就是:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;在 &lt;code&gt;content&lt;/code&gt; 目录对应分类子目录中创建 &lt;code&gt;*.md&lt;/code&gt; 文本,组织文章&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab build&lt;/code&gt; 完成编译,本地检阅文章效果&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git add . &amp;amp;&amp;amp; git ci &amp;amp;&amp;amp; git pu&lt;/code&gt; 将增补提交&lt;/li&gt;
&lt;li&gt;&lt;code&gt;fab pub2cafe&lt;/code&gt; 自动完成进入 &lt;code&gt;output&lt;/code&gt; 后的一系列 git 操作&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;对应的 配置中:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;#DELETE_OUTPUT_DIRECTORY = True&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;就绝对不能打开注释
不然 &lt;code&gt;output&lt;/code&gt; 目录清除,就没有了 &lt;code&gt;.git&lt;/code&gt; 也就无法发布了...&lt;/p&gt;
&lt;h2 id="_8"&gt;坑&lt;/h2&gt;
&lt;p&gt;整个过程中,遇到没有找到文档的小麻烦,自个儿解决了的....&lt;/p&gt;
&lt;h3 id="disqus"&gt;DISQUS&lt;/h3&gt;
&lt;p&gt;果断遇到了 DISQUS 配置了,不生效的问题,上下折腾, 才发现很多人都遇到了这个问题,
追踪到代码:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c1"&gt;//... pelican-themes/pelican-bootstrap3/templates/includes/comments.html&lt;/span&gt;
&lt;span class="c1"&gt;//...&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_shortname&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{{ DISQUS_SITENAME }}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="c1"&gt;// required: replace example with your forum shortname&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_identifier&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{{ article.slug }}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;span class="kd"&gt;var&lt;/span&gt; &lt;span class="nx"&gt;disqus_url&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;'{{ SITEURL }}/{{ article.url }}'&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;才发现 &lt;code&gt;SITEURL&lt;/code&gt; 的配置是决定性的,
一定要同 &lt;code&gt;DISQUS&lt;/code&gt; 申请时的一致;
本地编译后, 看一眼源代码,就知道是否靠谱了...&lt;/p&gt;
&lt;h3 id="pages"&gt;pages&lt;/h3&gt;
&lt;p&gt;突然发现 &lt;code&gt;content/pages&lt;/code&gt; 目录中的文本,是种特殊文章,不但可以出现在导航,而且使用专用的模板,
所以,默认是没有 &lt;code&gt;DISQUS&lt;/code&gt; 槽接的!&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;参考,俺的&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/page.html"&gt;page.html&lt;/a&gt; &lt;/li&gt;
&lt;li&gt;追加了仿制的: &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/page_comments.html"&gt;includes/page_comments.html&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;fixed!&lt;/p&gt;
&lt;h3 id="category_feed_atom"&gt;CATEGORY_FEED_ATOM&lt;/h3&gt;
&lt;p&gt;一时手賎,打开了:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="na"&gt;CATEGORY_FEED_ATOM&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s"&gt;'feeds/%s.atom.xml'&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;结果,发现不能在模板里简单的完成分类子 RSS 的链接!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;    &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-th icon-large"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;Categories&lt;span class="nt"&gt;&amp;lt;/h4&amp;gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% for cat, null in categories %}
    &lt;span class="nt"&gt;&amp;lt;li&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"list-group-item"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ SITEURL }}/{{ cat.url }}"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-folder-open icon-large"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;{{ cat }}
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;a&lt;/span&gt; &lt;span class="na"&gt;href=&lt;/span&gt;&lt;span class="s"&gt;"{{ SITEURL }}/feeds/{{ cat }}.atom.xml"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&lt;/span&gt;
            &lt;span class="nt"&gt;&amp;lt;i&lt;/span&gt; &lt;span class="na"&gt;class=&lt;/span&gt;&lt;span class="s"&gt;"icon-rss-sign"&lt;/span&gt;&lt;span class="nt"&gt;&amp;gt;&amp;lt;/i&amp;gt;&lt;/span&gt;
        &lt;span class="nt"&gt;&amp;lt;/a&amp;gt;&lt;/span&gt;
    &lt;span class="nt"&gt;&amp;lt;/li&amp;gt;&lt;/span&gt;
{% endfor %}
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;因为这儿的 &lt;code&gt;{{ cat }}&lt;/code&gt; 是分类的名称,可能包含大小写字母,
而配置指导下生成的 RSS 文件是全小写的...&lt;/p&gt;
&lt;p&gt;纠结了一会儿,也没有查到对应的文档,突然想到各种内置对象都有的 &lt;code&gt;sulg&lt;/code&gt; 属性!&lt;/p&gt;
&lt;p&gt;于是就猜对了...
参考:
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/sidebar.html#L22"&gt;includes/sidebar.html#22&lt;/a&gt;&lt;/p&gt;
&lt;h3 id="author"&gt;author&lt;/h3&gt;
&lt;p&gt;原样式作者因为是个人网站,所以,无所谓 &lt;code&gt;Author&lt;/code&gt; 的信息,
但是,作为社区用共笔环境,就必须有所体现,
在 &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/includes/article_info.html"&gt;includes / article_info.html&lt;/a&gt;
先打开作者的属性输出,&lt;/p&gt;
&lt;p&gt;然后,从别的 theme 工程中抄一个模板:
&lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/_themes/pelican-bootstrap3/templates/author.html"&gt;author.html&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;即好!&lt;/p&gt;
&lt;h3 id="toc"&gt;TOC&lt;/h3&gt;
&lt;p&gt;是的,以往 rST/t2t 时,甚至于 Word 时都有的 &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;TOC&lt;/span&gt; &lt;span class="o"&gt;~&lt;/span&gt; &lt;span class="err"&gt;章节索引&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;肿么可以没有?!&lt;/p&gt;
&lt;p&gt;果断: &lt;a href="https://github.com/getpelican/pelican-plugins/tree/master/extract_toc"&gt;pelican-plugins/extract_toc at master · getpelican/pelican-plugins&lt;/a&gt; &lt;/p&gt;
&lt;p&gt;只是这货竟然是依赖 &lt;code&gt;beautifulsoup4&lt;/code&gt; 的! 对于非 &lt;code&gt;UNIX/Linux/MAC&lt;/code&gt; 用户而言,
人艰不拆哪!!!&lt;/p&gt;
&lt;h2 id="_9"&gt;参考:&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="http://riku.gitcafe.com/pelican-gitcafe.html"&gt;使用 Pelican + GitCafe Page 创建 Blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://blog.imley.net/2013/01/03/disqus-thread-url-issue/#content"&gt;吐槽一下DISQUS的thread链接错误问题 | Ley's blog&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://raichev.net/blohg-to-pelican.html"&gt;Alex Raichev - Blog - Blohg to Pelican&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id="changelog"&gt;Changelog&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;140127 ZoomQuiet 增补宏观理解&lt;/li&gt;
&lt;li&gt;140120 ZoomQuiet 复制到 QPython 的 Pelican 工程&lt;/li&gt;
&lt;li&gt;131219 ZoomQuiet 为 &lt;a href="https://gitcafe.com/CPyUG/weekly/blob/master/README.md"&gt;CPyUG/weekly - GitCafe&lt;/a&gt; 创建&lt;/li&gt;
&lt;/ul&gt;</summary><category term="howto"></category><category term="pelican"></category></entry><entry><title>Zoom.Quiuet</title><link href="http://cubieboard.github.io/author/zoom-quiet.html" rel="alternate"></link><updated>2013-11-17T00:00:00+08:00</updated><author><name>Zoom.Quiet</name></author><id>tag:cubieboard.github.io,2013-11-17:author/zoom-quiet.html</id><summary type="html">&lt;h1 id="zoomquiet"&gt;Zoom.Quiet (大妈)&lt;/h1&gt;
&lt;p&gt;&lt;img alt="ZQ" src="http://pyconcn.qiniudn.com/images/volunteer/zhouqi.png" /&gt;&lt;/p&gt;
&lt;p&gt;Python中文社区创始人(之一) / 管理员,
热心于 Python 等等社区的公益事业, 大家熟知的社区"大妈";&lt;/p&gt;
&lt;p&gt;&lt;a href="http://code.google.com/p/openbookproject/"&gt;O.B.P&lt;/a&gt;
(Open Book Proj.~中文蟒样开放图书计划)
及
蟒营(&lt;a href="http://code.google.com/p/kcpycamp/wiki/PythoniCamp"&gt;PythoniCamp&lt;/a&gt;)
工程设计者 /主持人;
参与并主持各种线上 / 线下活动;
主持编撰了
&lt;a href="http://book.douban.com/subject/3884108/"&gt;&amp;lt;&amp;lt;可爱的Python&amp;gt;&amp;gt;&lt;/a&gt;
坚持用 Pythonic 感化国人进入 FLOSS世界进行学习 / 分享 / 创造...&lt;/p&gt;
&lt;p&gt;目前就职于金山网络。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;G+:   https://plus.google.com/+ZoomQuiet/&lt;/li&gt;
&lt;li&gt;Blog: http://blog.zoomquiet.org/&lt;/li&gt;
&lt;li&gt;微博:  http://weibo.com/zoomquiet&lt;/li&gt;
&lt;/ul&gt;</summary><category term="people"></category></entry></feed>